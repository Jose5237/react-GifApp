{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,sBAAMC,SARW,SAAEC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAIlB,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAfc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,yDAC2CC,UAAUH,GADrD,sDAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKf,EAAKgB,IAAKN,QCHnBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAc,IAAD,EACbd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAcvC,OATAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACEH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAG3B,CAACpB,IACKqB,EDVuBK,CAAa1B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACV,qBAAKA,UAAU,YAAf,SAEMH,EAAOJ,KAAI,SAAAgB,GAAI,OACX,cAAC,EAAD,eAESA,GADCA,EAAKd,aEOxBgB,EApBM,SAAAC,GAAU,IAAD,EACU1C,mBAAS,CAAC,mBADpB,mBACnB2C,EADmB,KACP5C,EADO,KAE1B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCT9B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.998643a9.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = ( e ) =>{\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange  = {handleInputChange}\r\n            />\r\n        </form>\r\n          \r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=5&q=${encodeURI(category)}&api_key=TwBhzMjVvM5r9xn8YfiEVEMPTcU5GVmZ`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    //console.log(gifs);\r\n    return(gifs);\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    //console.log(title, \" | \", url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title}/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            { <div className=\"card-grid\">\r\n                {\r\n                    images.map(imgs => (\r\n                        <GifGridItem\r\n                            key= {imgs.id}\r\n                            { ...imgs }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = ( category ) =>{\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs =>{\r\n                    setState({\r\n                        data:imgs,\r\n                        loading: false\r\n                    });\r\n            });\r\n    },[category]);\r\n    return (state);\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = props => {\r\n    const [categories, setCategories] = useState([`Queen's gambit`]);\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr></hr>\r\n            <ol>\r\n                {\r\n                    categories.map(category=>\r\n                        <GifGrid \r\n                        key= {category}\r\n                        category= {category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}